#pragma checksum "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "76dbfa7a14a88e45af844cdb0a13734d494bfaeb"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace SupplyChain.Components.Operarios
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using SupplyChain.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using SupplyChain.Components.Operarios;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\_Imports.razor"
using Syncfusion.Blazor;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Grids;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Data;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Calendars;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.DropDowns;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Inputs;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using System.Configuration;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using System.Data.SqlClient;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Navigations;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Popups;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.Buttons;

#line default
#line hidden
#nullable disable
#nullable restore
#line 11 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using Syncfusion.Blazor.BarcodeGenerator;

#line default
#line hidden
#nullable disable
#nullable restore
#line 13 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
using SupplyChain;

#line default
#line hidden
#nullable disable
    public partial class ListOperarioComponent : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 189 "C:\Users\Administrador\Desktop\SupplyChain\SupplyChain\Components\Operarios\ListOperarioComponent.razor"
       
    private SfGrid<OperarioEntity> Grid;
    //Boolean Check = true, Check1 = true, Check2 = true, Check3 = true, Check4 = true, Check5 = true, Check6 = true, Check7 = true, Check8 = true, Check9 = true, Check10 = true, Check11 = true;
    public void Refresh()
    {
        Grid.Refresh();
    }

    private List<Object> Toolbaritems = new List<Object>(){
        "Search",
        "Add",
        "Edit",
        "Delete",
        "Print",
        new ItemModel { Text = "Copy", TooltipText = "Copy", PrefixIcon = "e-copy", Id = "copy" },
        //new ItemModel { Text = "ColumnChooser", TooltipText = "ColumnChooser", PrefixIcon = "e-copy", Id = "ColumnChooser" },
        //new ItemModel { Text = "Excel", TooltipText = "Copy", PrefixIcon = "e-copy", Id = "copy" },
        //new List<string>() { "ColumnChooser"},
        "ExcelExport"
    };

    /*private List<String> Toolbaritems = new List<string>() { "ColumnChooser" };*/

    public bool Enabled = true;
    public bool Disabled = false;

    List<OperarioEntity> operarios = new List<OperarioEntity>();
    List<CatOpeEntity> categorias = new List<CatOpeEntity>();
    List<UsuarioEntity> usuarios = new List<UsuarioEntity>();
    List<ClienteEntity> clientes = new List<ClienteEntity>();
    List<MonedasEntity> monedas = new List<MonedasEntity>();
    List<TurnosEntity> turnos = new List<TurnosEntity>();

    protected override async Task OnInitializedAsync()
    {
        operarios = await Http.GetFromJsonAsync<List<OperarioEntity>>("api/Operario");
        operarios = operarios.OrderByDescending(s => s.CG_OPER).ToList();
        categorias = await Http.GetFromJsonAsync<List<CatOpeEntity>>("api/CatOpe");
        usuarios = await Http.GetFromJsonAsync<List<UsuarioEntity>>("api/Usuarios");
        clientes = await Http.GetFromJsonAsync<List<ClienteEntity>>("api/Cliente");
        monedas = await Http.GetFromJsonAsync<List<MonedasEntity>>("api/Monedas");
        turnos = await Http.GetFromJsonAsync<List<TurnosEntity>>("api/Turnos");

        await base.OnInitializedAsync();
    }

    public void ActionBeginHandler(ActionEventArgs<OperarioEntity> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            // The Textbox component is disabled using its Enabled property
            this.Enabled = false;
        }
        else
        {
            this.Enabled = true;
        }
    }
    public class Moneda
    {
        public string ID { get; set; }
        public string Text { get; set; }
    }
    List<Moneda> MonedaData = new List<Moneda> {
    new Moneda() { ID= "Mon1", Text= "Peso Argentino"},
    new Moneda() { ID= "Mon2", Text= "Dolar"},
    new Moneda() { ID= "Mon3", Text= "Euro"}};

    public class EstaActivo
    {
        public bool BActivo { get; set; }
        public string Text { get; set; }
    }
    List<EstaActivo> ActivoData = new List<EstaActivo> {
    new EstaActivo() { BActivo= true, Text= "SI"},
    new EstaActivo() { BActivo= false, Text= "NO"}};

    /*public void valueChange(Syncfusion.Blazor.Buttons.ChangeEventArgs args)
    {
        if (CheckBox1.Checked == true)
        {
            chkbox2 = false;
            chkbox3 = false;
        }
    }*/

    public async Task ActionBegin(ActionEventArgs<OperarioEntity> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {           //from here you can call the AddMethod of you database.
            bool found = false;
            foreach (var operario in operarios)
            {
                if (operario.CG_OPER == args.Data.CG_OPER)
                {
                    OperarioEntity ur = new OperarioEntity();
                    ur.CG_OPER = args.Data.CG_OPER;
                    ur.DES_OPER = args.Data.DES_OPER;
                    ur.CG_TURNO = args.Data.CG_TURNO;
                    ur.RENDIM = args.Data.RENDIM;
                    ur.FE_FINAL = args.Data.FE_FINAL;
                    ur.HS_FINAL = args.Data.HS_FINAL;
                    ur.CG_CATEOP = args.Data.CG_CATEOP;
                    ur.VALOR_HORA = args.Data.VALOR_HORA;
                    ur.MONEDA = args.Data.MONEDA;
                    ur.ACTIVO = args.Data.ACTIVO;
                    ur.CG_CIA = args.Data.CG_CIA;
                    ur.USUARIO = args.Data.USUARIO;
                    await Http.PutAsJsonAsync($"api/Operario/{args.Data.CG_OPER}", ur);
                    found = true;
                }
            }
            if (!found)
            {
                OperarioEntity ub = new OperarioEntity();
                ub.CG_OPER = args.Data.CG_OPER;
                ub.DES_OPER = args.Data.DES_OPER;
                ub.CG_TURNO = args.Data.CG_TURNO;
                ub.RENDIM = args.Data.RENDIM;
                ub.FE_FINAL = args.Data.FE_FINAL;
                ub.HS_FINAL = args.Data.HS_FINAL;
                ub.CG_CATEOP = args.Data.CG_CATEOP;
                ub.VALOR_HORA = args.Data.VALOR_HORA;
                ub.MONEDA = args.Data.MONEDA;
                ub.ACTIVO = args.Data.ACTIVO;
                ub.CG_CIA = args.Data.CG_CIA;
                ub.USUARIO = args.Data.USUARIO;
                await Http.PostAsJsonAsync("api/Operario", ub);
            }
        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            try
            {
                if (args.Data != null)
                {
                    bool isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Seguro de que desea eliminar el Operario?");
                    if (isConfirmed)
                    {
                        //operarios.Remove(operarios.Find(m => m.CG_OPER == args.Data.CG_OPER));
                        await Http.DeleteAsync($"api/Operario/{args.Data.CG_OPER}");
                    }
                }
            }
            catch (Exception ex)
            {

            }
        }
    }

    public async Task ClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Text == "Copy")
        {
            /*var temp = this.Grid.GetSelectedRowIndexes(); // return the details of selceted record
            message = temp.ToString();*/

            if (this.Grid.SelectedRecords.Count > 0)
            {
                foreach (OperarioEntity selectedRecord in this.Grid.SelectedRecords)
                {
                    bool isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Seguro de que desea copiar el Operario?");
                    if (isConfirmed)
                    {
                        OperarioEntity Nuevo = new OperarioEntity();

                        Nuevo.DES_OPER = selectedRecord.DES_OPER;
                        Nuevo.CG_TURNO = selectedRecord.CG_TURNO;
                        Nuevo.RENDIM = selectedRecord.RENDIM;
                        Nuevo.FE_FINAL = selectedRecord.FE_FINAL;
                        Nuevo.HS_FINAL = selectedRecord.HS_FINAL;
                        Nuevo.CG_CATEOP = selectedRecord.CG_CATEOP;
                        Nuevo.VALOR_HORA = selectedRecord.VALOR_HORA;
                        Nuevo.MONEDA = selectedRecord.MONEDA;
                        Nuevo.ACTIVO = selectedRecord.ACTIVO;
                        Nuevo.CG_CIA = selectedRecord.CG_CIA;
                        Nuevo.USUARIO = selectedRecord.USUARIO;

                        operarios.Add(Nuevo);
                        await Http.PostAsJsonAsync("api/Operario", Nuevo);
                        operarios = operarios.OrderBy(s => s.CG_OPER).ToList();
                        Refresh();
                    }
                }
            }
        }
        if (args.Item.Text == "Excel Export")
        {
            await this.Grid.ExcelExport();
        }
    }

    private async Task LoadOperarios()
    {
        operarios = await Http.GetFromJsonAsync<List<OperarioEntity>>("api/Operario");
        operarios = operarios.OrderByDescending(s => s.CG_OPER).ToList();

        StateHasChanged();
    }

    /*public void ActionFailureHandler(Syncfusion.Blazor.Grids.FailureEventArgs args)
    {
        // Here you can get the error details in the args
        string message = args.ToString();
    }*/

    /*public void change(string name, Syncfusion.Blazor.Buttons.ChangeEventArgs<bool> args)
    {
        if (args.Checked)
        {
            this.Grid.ShowColumns(name);
        }
        else
        {
            this.Grid.HideColumns(name);
        }
    }*/

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private NavigationManager NavManager { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private CustomHttpClient Http { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IJSRuntime JsRuntime { get; set; }
    }
}
#pragma warning restore 1591
